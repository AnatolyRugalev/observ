//go:build !logq
// +build !logq

// Code generated by chaingen. DO NOT EDIT.

package logq

import (
	"github.com/AnatolyRugalev/observ/internal/genq"
)

func (r Records) Where(operands ...genq.FilterFunc[Record]) Filter {
	return r.filter(r.unwrap().Where(operands...))
}

func (r Records) Group(fn genq.GroupFunc[string, Record]) Group[string] {
	return r.group(r.unwrap().Group(fn))
}

func (r Records) Merge(slices ...Records) Records {
	return r.wrap(r.unwrap().Merge(new(Records).gen_unwrap(slices...)...))
}

func (r Records) Resolve() Records {
	return r.wrap(r.unwrap().Resolve())
}

func (r Records) First() Record {
	return r.unwrap().First()
}

func (r Records) Last() Record {
	return r.unwrap().Last()
}

func (r Records) Count() int {
	return r.unwrap().Count()
}

func (Records) gen_unwrap(in ...Records) []genq.Slice[Record] {
	out := make([]genq.Slice[Record], len(in))
	for i := range in {
		out[i] = in[i].unwrap()
	}
	return out
}
