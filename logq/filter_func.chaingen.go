//go:build !logq
// +build !logq

// Code generated by chaingen. DO NOT EDIT.

package logq

import (
	"github.com/AnatolyRugalev/observ/internal/genq"
)

func (fn FilterFunc) And(operands ...FilterFunc) FilterFunc {
	return fn.wrap(fn.unwrap().And(new(FilterFunc).gen_unwrap(operands...)...))
}

func (fn FilterFunc) Or(operands ...FilterFunc) FilterFunc {
	return fn.wrap(fn.unwrap().Or(new(FilterFunc).gen_unwrap(operands...)...))
}

func (fn FilterFunc) Invert() FilterFunc {
	return fn.wrap(fn.unwrap().Invert())
}

func (fn FilterFunc) Not(operands ...FilterFunc) FilterFunc {
	return fn.wrap(fn.unwrap().Not(new(FilterFunc).gen_unwrap(operands...)...))
}

func (FilterFunc) gen_unwrap(in ...FilterFunc) []genq.FilterFunc[Record] {
	out := make([]genq.FilterFunc[Record], len(in))
	for i := range in {
		out[i] = in[i].unwrap()
	}
	return out
}

func And(operands ...FilterFunc) FilterFunc {
	return new(FilterFunc).And(operands...)
}

func Or(operands ...FilterFunc) FilterFunc {
	return new(FilterFunc).Or(operands...)
}

func Invert() FilterFunc {
	return new(FilterFunc).Invert()
}

func Not(operands ...FilterFunc) FilterFunc {
	return new(FilterFunc).Not(operands...)
}

func Message(message string) FilterFunc {
	return new(FilterFunc).Message(message)
}

func Attr(key string, value any) FilterFunc {
	return new(FilterFunc).Attr(key, value)
}
