//go:build !logq
// +build !logq

// Code generated by chaingen. DO NOT EDIT.

package logq

import (
	"github.com/AnatolyRugalev/observ/internal/genq"
)

func (f Filter) Group(fn genq.GroupFunc[string, Record]) Group[string] {
	return f.group(f.filter.Group(fn))
}

func (f Filter) Merge(slices ...Records) Records {
	return f.slice(f.filter.Merge(new(Records).gen_unwrap(slices...)...))
}

func (f Filter) Last() Record {
	return f.filter.Last()
}

func (f Filter) Count() int {
	return f.filter.Count()
}

func (f Filter) First() Record {
	return f.filter.First()
}

func (f Filter) Invert() Filter {
	return f.wrap(f.filter.Invert())
}

func (f Filter) And(operands ...FilterFunc) Filter {
	return f.wrap(f.filter.And(new(FilterFunc).gen_unwrap(operands...)...))
}

func (f Filter) Or(operands ...FilterFunc) Filter {
	return f.wrap(f.filter.Or(new(FilterFunc).gen_unwrap(operands...)...))
}

func (f Filter) Not(operands ...FilterFunc) Filter {
	return f.wrap(f.filter.Not(new(FilterFunc).gen_unwrap(operands...)...))
}

func (f Filter) Attr(key string, value any) Filter {
	return f.WithFn(f.Fn().Attr(key, value))
}

func (f Filter) Message(message string) Filter {
	return f.WithFn(f.Fn().Message(message))
}
