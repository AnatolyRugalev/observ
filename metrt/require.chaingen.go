//go:build !require
// +build !require

// Code generated by chaingen. DO NOT EDIT.

package metrt

func (r RequireGroup[K]) Sum(expected map[K]int64) {
	r.assert.group.T.t.Helper()
	r.require(r.assert.Sum(expected))
}

func (r Require) Value(expected IntOrFloat, msgAndArgs ...any) {
	r.assert.filter.T.t.Helper()
	r.require(r.assert.Value(expected, msgAndArgs...))
}

func (r Require) ValueGreater(expected IntOrFloat, msgAndArgs ...any) {
	r.assert.filter.T.t.Helper()
	r.require(r.assert.ValueGreater(expected, msgAndArgs...))
}

func (r Require) ValueLess(expected IntOrFloat, msgAndArgs ...any) {
	r.assert.filter.T.t.Helper()
	r.require(r.assert.ValueLess(expected, msgAndArgs...))
}

func (r Require) ValueLessOrEqual(expected IntOrFloat, msgAndArgs ...any) {
	r.assert.filter.T.t.Helper()
	r.require(r.assert.ValueLessOrEqual(expected, msgAndArgs...))
}

func (r Require) ValueGreaterOrEqual(expected IntOrFloat, msgAndArgs ...any) {
	r.assert.filter.T.t.Helper()
	r.require(r.assert.ValueGreaterOrEqual(expected, msgAndArgs...))
}

func (r Require) Sum(expected IntOrFloat, msgAndArgs ...any) {
	r.assert.filter.T.t.Helper()
	r.require(r.assert.Sum(expected, msgAndArgs...))
}

func (r Require) SumGreater(expected IntOrFloat, msgAndArgs ...any) {
	r.assert.filter.T.t.Helper()
	r.require(r.assert.SumGreater(expected, msgAndArgs...))
}

func (r Require) SumGreaterOrEqual(expected IntOrFloat, msgAndArgs ...any) {
	r.assert.filter.T.t.Helper()
	r.require(r.assert.SumGreaterOrEqual(expected, msgAndArgs...))
}

func (r Require) SumLess(expected IntOrFloat, msgAndArgs ...any) {
	r.assert.filter.T.t.Helper()
	r.require(r.assert.SumLess(expected, msgAndArgs...))
}

func (r Require) SumLessOrEqual(expected IntOrFloat, msgAndArgs ...any) {
	r.assert.filter.T.t.Helper()
	r.require(r.assert.SumLessOrEqual(expected, msgAndArgs...))
}
