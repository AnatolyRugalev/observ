//go:build !mct
// +build !mct

// Code generated by chaingen. DO NOT EDIT.

package metrt

import (
	"github.com/AnatolyRugalev/observ/internal/genq"
	"github.com/AnatolyRugalev/observ/metrq"
)

func (g Group[K]) FloatSum() map[K]float64 {
	return g.group.FloatSum()
}

func (g Group[K]) IntSum() map[K]int64 {
	return g.group.IntSum()
}

func (g Group[K]) Aggregate(fn genq.AggregationFunc[float64]) map[K]metrq.Metric {
	return g.group.Aggregate(fn)
}

func (g Group[K]) AggregateFlat(fn genq.AggregationFunc[float64]) metrq.Metrics {
	return g.group.AggregateFlat(fn)
}

func (g Group[K]) Float(fn genq.AggregationFunc[float64]) map[K]float64 {
	return g.group.Float(fn)
}

func (g Group[K]) Int(fn genq.AggregationFunc[float64]) map[K]int64 {
	return g.group.Int(fn)
}

func (f Metrics) Where(operands ...genq.FilterFunc[metrq.Metric]) Metrics {
	return f.wrapFilter(f.filter.Where(operands...))
}

func (f Metrics) And(operands ...genq.FilterFunc[metrq.Metric]) Metrics {
	return f.wrapFilter(f.filter.And(operands...))
}

func (f Metrics) Or(operands ...genq.FilterFunc[metrq.Metric]) Metrics {
	return f.wrapFilter(f.filter.Or(operands...))
}

func (f Metrics) Metrics() metrq.Metrics {
	return f.filter.Metrics()
}

func (f Metrics) Resolve() []metrq.Metric {
	return f.filter.Resolve()
}

func (f Metrics) Group(fn genq.GroupFunc[string, metrq.Metric]) Group[string] {
	return f.wrapGroup(f.filter.Group(fn))
}
