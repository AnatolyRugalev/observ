//go:build !metrq
// +build !metrq

// Code generated by chaingen. DO NOT EDIT.

package metrq

import (
	"github.com/AnatolyRugalev/observ/internal/genq"
)

// Flat returns all items in a group as a slice.
func (g Group[K]) Flat() Metrics {
	return g.wrapMetrics(g.group.Flat())
}

// Aggregate performs an aggregation, and returns results as a map
func (g Group[K]) Aggregate(fn genq.AggregationFunc[Metric]) map[K]Metric {
	return g.group.Aggregate(fn)
}

// AggregateFlat performs an aggregation, and returns results as a slice.
func (g Group[K]) AggregateFlat(fn genq.AggregationFunc[Metric]) Metrics {
	return g.wrapMetrics(g.group.AggregateFlat(fn))
}

// Key returns a list of items grouped by a given key value.
func (g Group[K]) Key(key K) Metrics {
	return g.wrapMetrics(g.group.Key(key))
}

// AsMap returns grouped values as a map
func (g Group[K]) AsMap() map[K]Metrics {
	return g.wrapMetricsMap(g.group.AsMap())
}
