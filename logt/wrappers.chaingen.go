//go:build !lqt
// +build !lqt

// Code generated by chaingen. DO NOT EDIT.

package logt

import (
	"github.com/AnatolyRugalev/observ/internal/genq"
	"github.com/AnatolyRugalev/observ/logq"
)

func (g Group[K]) Aggregate(fn genq.AggregationFunc[logq.Record]) map[K]logq.Record {
	return g.group.Aggregate(fn)
}

func (g Group[K]) AggregateFlat(fn genq.AggregationFunc[logq.Record]) logq.Records {
	return g.group.AggregateFlat(fn)
}

func (g Group[K]) Count() map[K]int {
	return g.group.Count()
}

func (f Records) Where(operands ...genq.FilterFunc[logq.Record]) Records {
	return f.wrapFilter(f.filter.Where(operands...))
}

func (f Records) And(operands ...genq.FilterFunc[logq.Record]) Records {
	return f.wrapFilter(f.filter.And(operands...))
}

func (f Records) Or(operands ...genq.FilterFunc[logq.Record]) Records {
	return f.wrapFilter(f.filter.Or(operands...))
}

func (f Records) Records() logq.Records {
	return f.filter.Records()
}

func (f Records) Group(fn genq.GroupFunc[string, logq.Record]) Group[string] {
	return f.wrapGroup(f.filter.Group(fn))
}

func (f Records) Message(msg string) Records {
	return f.wrapFilter(f.filter.Message(msg))
}

func (f Records) Attr(key string, value any) Records {
	return f.wrapFilter(f.filter.Attr(key, value))
}
